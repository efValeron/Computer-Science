// Computer Science 18.11.2023

const array = [
  2, 4, 6, 8, 0, 1, 3, 5, 7, 9
]

// function insertionSort(array) {
//   for (let i = 1; i < array.length; i++) {
//     const currentElement = array[i]
//     let j
//     for (j = i - 1; j >= 0 && array[j] > currentElement; j--) {
//       array[j + 1] = array[j]
//     }
//     array[j + 1] = currentElement
//   }
// }
// insertionSort(array)


function bubbleSort(array) {
  let operations = 0
  for (let i = 0; i < array.length - 1; i++) {
    let swap = true
    for (let j = 0; j < array.length - i; j++) {
      operations++
      swap = false
        [ array[j], array[j + 1] ] = [ array[j + 1], array[j] ]
      if (array[j] > array[j + 1]) {
      }
    }
    if (swap) break
  }
  console.log(operations)
}

bubbleSort(array)

console.log(array)

// Шейкерная Сортировка (Cocktail Shaker Sort): Это вариация пузырьковой сортировки, где сортировка происходит в двух направлениях на каждом проходе через список. После каждого прохода в одном направлении, направление меняется. Это может быть эффективнее, так как уменьшает количество "черепах" — медленно двигающихся элементов в начале списка.
// Запоминание Позиции Последнего Обмена: Вместо проверки всего массива на каждом проходе, алгоритм может запоминать позицию последнего обмена. Элементы после этой позиции уже отсортированы, и их не нужно проверять в следующих проходах.
// Комбинированная Сортировка (Comb Sort): Это улучшение пузырьковой сортировки, где сравниваются элементы, находящиеся на значительном расстоянии друг от друга, а затем это расстояние постепенно уменьшается. Это помогает быстрее устранять "черепах".
// Оптимизация Остановки для Отсортированных Секций: В стандартной пузырьковой сортировке, даже если последняя часть массива уже отсортирована, она продолжает проходить проверку. Можно оптимизировать алгоритм, уменьшая диапазон проверяемых элементов на основе знаний об уже отсортированных секциях.